[gd_resource type="Shader" format=3 uid="uid://b0rsy6b5sb0qg"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_prepass_alpha,cull_disabled,diffuse_burley,specular_schlick_ggx;
group_uniforms sway_paramenters;
global uniform vec3 wind_direction = vec3(0);
uniform sampler2D wind_noise;
uniform float sway_intensity = 1.;
group_uniforms Albedo;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
group_uniforms Roughness;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
group_uniforms Metallic;
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform float specular;
uniform float metallic;
group_uniforms normals;
uniform sampler2D normal_map;
uniform float normal_intensity:hint_range(0.,1.) = 1;
group_uniforms Uvs;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	vec3 sway = texture(wind_noise,vec2(UV.x*(TIME-COLOR.g),UV.y*(TIME+COLOR.g)*.1)).rgb * sway_intensity * 0.1;
	VERTEX += sway * COLOR.r + (wind_direction * COLOR.r);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALPHA = albedo.a * albedo_tex.a;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(normal_map,base_uv).rgb * normal_intensity;
}
"
